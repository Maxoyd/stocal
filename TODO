- TypedReactionRule tests
=
- string rewrite rule support
- volume/temperature awareness
- non-autonomous transitions
- support for proper delay events
- libSBML integration
- statistical verification tests
- every/until filters and other stop criteria
- curried reactions (determine products only upon application)
- other kinetic laws, e.g. Hill function
- SSA profiling and algorithm variations
- C/C++/D implementation
= version 1.1+
- deprecate dict support in MassAction.reactions and ReactionRule.infer_transitions
- deprecate invalid-name arguments
= version 2


Typed Reactions
===============
ReactionRules should accept an optional signature attribute. If given,
it must evaluate to a sequence of type objects with the same length
than the arguments accepted by the Rule's novel_reactions method.
If not specified, it defaults to a sequence of `object` types whose
length equals the order of the reaction.

ReactionRule.infer_transitions can then be rewritten to only generate
combinations of reactants that adhere to the Rule's signature.
novel_reactions should be invoked for the combination reactants only
if all(isinstance(species, typ) for species, typ in
       zip(reactants, self.signature))

class MyTypedRule(stocal.ReactionRule):
    Transition = stocal.MassAction
    signature = [str, tuple]

    def novel_reactions(self, k, l):
        pass # [...]

At the same time, if a Rule signature is given, it should be explicitly
allowed to use variable arguments in novel_reactants, as in

class MyTypedRule(stocal.ReactionRule):
    Transition = stocal.MassAction
    signature=[str, str, str]

    def novel_reactions(self, *reactants):
        pass # [...]
